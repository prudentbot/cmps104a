head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2013.09.20.19.23.31;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.09.20.02.55.32;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.09.19.23.38.25;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@#ifndef __ASTREE_H__
#define __ASTREE_H__

#include <string>
#include <vector>
using namespace std;

#include "auxlib.h"

struct astree {
   int symbol;               // token code
   size_t filenr;            // index into filename stack
   size_t linenr;            // line number from source code
   size_t offset;            // offset of token with current line
   const string* lexinfo;    // pointer to lexical information
   vector<astree*> children; // children of this n-way node
};


astree* new_astree (int symbol, int filenr, int linenr, int offset,
                    const char* lexinfo);
astree* adopt1 (astree* root, astree* child);
astree* adopt2 (astree* root, astree* left, astree* right);
astree* adopt1sym (astree* root, astree* child, int symbol);
void dump_astree (FILE* outfile, astree* root);
void yyprint (FILE* outfile, unsigned short toknum, astree* yyvaluep);
void free_ast (astree* tree);
void free_ast2 (astree* tree1, astree* tree2);

RCSH("$Id: astree.h,v 1.2 2013-09-19 19:55:32-07 - - $")
#endif
@


1.2
log
@-
@
text
@d21 1
a21 1
                    const string& lexinfo);
d30 1
a30 1
RCSH("$Id: astree.h,v 1.1 2013-09-19 16:38:25-07 - - $")
@


1.1
log
@-
@
text
@d12 4
a15 4
   int filenr;               // index into filename stack
   int linenr;               // line number from source code
   int offset;               // offset of token with current line
   string lexinfo;           // pointer to lexical information
d30 1
a30 1
RCSH("$Id: astree.h,v 1.8 2013-08-22 13:58:43-07 - - $")
@
