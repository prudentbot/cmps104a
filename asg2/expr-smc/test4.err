==5545== Memcheck, a memory error detector
==5545== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==5545== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==5545== Command: zexprsm -ly -@@ test4.in
==5545== 
DEBUGF(x): auxlib.cc[112] set_debugflags():
Debugflags = "@", all = 1
DEBUGF(m): main.cc[69] scan_opts():
filename = test4.in, yyin = 0x4c2a1d0, fileno (yyin) = 3
Starting parse
Entering state 0
Reducing stack by rule 5 (line 47):
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2a3d0->{0:0.0: ROOT: "<<ROOT>>"}
-> $$ = nterm stmtseq ()
Stack now 0
Entering state 2
Reading a token: --(end of buffer or a NUL)
--accepting rule at line 32 ("# 1 "test4.in"")
DEBUGF(m): lyutils.cc[97] scanner_include():
filename=test4.in, scan_linenr=0
--accepting rule at line 34 ("
")
--accepting rule at line 32 ("# 1 "<built-in>"")
DEBUGF(m): lyutils.cc[97] scanner_include():
filename=<built-in>, scan_linenr=0
--accepting rule at line 34 ("
")
--accepting rule at line 32 ("# 1 "<command-line>"")
DEBUGF(m): lyutils.cc[97] scanner_include():
filename=<command-line>, scan_linenr=0
--accepting rule at line 34 ("
")
--accepting rule at line 32 ("# 1 "test4.in"")
DEBUGF(m): lyutils.cc[97] scanner_include():
filename=test4.in, scan_linenr=0
--accepting rule at line 34 ("
")
--accepting rule at line 33 (" ")
--accepting rule at line 37 ("t")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2e920->{4:1.1: IDENT: "t"}
Next token is token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2e920
0x4c2e920->{IDENT(259) 4:1.001 "t" []})
Shifting token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2e920
0x4c2e920->{IDENT(259) 4:1.001 "t" []})
Entering state 5
Reducing stack by rule 15 (line 59):
   $1 = token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2e920
0x4c2e920->{IDENT(259) 4:1.001 "t" []})
-> $$ = nterm expr ()
Stack now 0 2
Entering state 11
Reading a token: --accepting rule at line 34 ("
")
--accepting rule at line 32 ("# 1 "test4a.inh" 1")
DEBUGF(m): lyutils.cc[97] scanner_include():
filename=test4a.inh, scan_linenr=0
--accepting rule at line 34 ("
")
--accepting rule at line 34 ("
")
--accepting rule at line 34 ("
")
--accepting rule at line 37 ("pi")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2eac0->{5:3.0: IDENT: "pi"}
Next token is token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2eac0
0x4c2eac0->{IDENT(259) 5:3.000 "pi" []})
zexprsm: test4a.inh: 3: syntax error, unexpected IDENT
Error: popping nterm expr ()
DEBUGF(a): lyutils.cc[74] error_destructor():

t 0x4c2e920->{IDENT(259) 4:1.001 "t" []}
DEBUGF(f): astree.cc[97] free_ast():
free [4C2E920]-> 4:1.1: IDENT: "t")
Stack now 0 2
Shifting token error (DEBUGF(f): astree.cc[79] yyprint():
toknum = 256, yyvaluep = 0x4c2eac0
error(256)
)
Entering state 4
Next token is token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2eac0
0x4c2eac0->{IDENT(259) 5:3.000 "pi" []})
Error: discarding token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2eac0
0x4c2eac0->{IDENT(259) 5:3.000 "pi" []})
DEBUGF(a): lyutils.cc[74] error_destructor():

pi 0x4c2eac0->{IDENT(259) 5:3.000 "pi" []}
DEBUGF(f): astree.cc[97] free_ast():
free [4C2EAC0]-> 5:3.0: IDENT: "pi")
Error: popping token error (DEBUGF(f): astree.cc[79] yyprint():
toknum = 256, yyvaluep = 0x4c2eac0
error(256)
)
Stack now 0 2
Shifting token error (DEBUGF(f): astree.cc[79] yyprint():
toknum = 256, yyvaluep = 0x4c2eac0
error(256)
)
Entering state 4
Reading a token: --accepting rule at line 39 ("=")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2ebf0->{5:3.2: '=': "="}
Next token is token '=' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 61, yyvaluep = 0x4c2ebf0
0x4c2ebf0->{'='(61) 5:3.002 "=" []})
Error: discarding token '=' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 61, yyvaluep = 0x4c2ebf0
0x4c2ebf0->{'='(61) 5:3.002 "=" []})
DEBUGF(a): lyutils.cc[74] error_destructor():

= 0x4c2ebf0->{'='(61) 5:3.002 "=" []}
DEBUGF(f): astree.cc[97] free_ast():
free [4C2EBF0]-> 5:3.2: '=': "=")
Error: popping token error (DEBUGF(f): astree.cc[79] yyprint():
toknum = 256, yyvaluep = 0x4c2eac0
error(256)
)
Stack now 0 2
Shifting token error (DEBUGF(f): astree.cc[79] yyprint():
toknum = 256, yyvaluep = 0x4c2ebf0
error(256)
)
Entering state 4
Reading a token: --accepting rule at line 36 ("3.141592653589793238462643383280")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2ed20->{5:3.3: NUMBER: "3.141592653589793238462643383280"}
Next token is token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c2ed20
0x4c2ed20->{NUMBER(260) 5:3.003 "3.141592653589793238462643383280" []})
Error: discarding token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c2ed20
0x4c2ed20->{NUMBER(260) 5:3.003 "3.141592653589793238462643383280" []})
DEBUGF(a): lyutils.cc[74] error_destructor():

3.141592653589793238462643383280 0x4c2ed20->{NUMBER(260) 5:3.003 "3.141592653589793238462643383280" []}
DEBUGF(f): astree.cc[97] free_ast():
free [4C2ED20]-> 5:3.3: NUMBER: "3.141592653589793238462643383280")
Error: popping token error (DEBUGF(f): astree.cc[79] yyprint():
toknum = 256, yyvaluep = 0x4c2ebf0
error(256)
)
Stack now 0 2
Shifting token error (DEBUGF(f): astree.cc[79] yyprint():
toknum = 256, yyvaluep = 0x4c2ed20
error(256)
)
Entering state 4
Reading a token: --accepting rule at line 47 (";")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2ee70->{5:3.35: ';': ";"}
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2ee70
0x4c2ee70->{';'(59) 5:3.035 ";" []})
Shifting token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2ee70
0x4c2ee70->{';'(59) 5:3.035 ";" []})
Entering state 12
Reducing stack by rule 3 (line 45):
   $1 = nterm stmtseq ()
   $2 = token error (DEBUGF(f): astree.cc[79] yyprint():
toknum = 256, yyvaluep = 0x4c2ed20
error(256)
)
   $3 = token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2ee70
0x4c2ee70->{';'(59) 5:3.035 ";" []})
DEBUGF(f): astree.cc[97] free_ast():
free [4C2EE70]-> 5:3.35: ';': ";")
-> $$ = nterm stmtseq ()
Stack now 0
Entering state 2
Reading a token: --accepting rule at line 34 ("
")
--accepting rule at line 37 ("pi")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2efa0->{5:4.0: IDENT: "pi"}
Next token is token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2efa0
0x4c2efa0->{IDENT(259) 5:4.000 "pi" []})
Shifting token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2efa0
0x4c2efa0->{IDENT(259) 5:4.000 "pi" []})
Entering state 5
Reducing stack by rule 15 (line 59):
   $1 = token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2efa0
0x4c2efa0->{IDENT(259) 5:4.000 "pi" []})
-> $$ = nterm expr ()
Stack now 0 2
Entering state 11
Reading a token: --accepting rule at line 47 (";")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2f080->{5:4.2: ';': ";"}
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2f080
0x4c2f080->{';'(59) 5:4.002 ";" []})
Shifting token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2f080
0x4c2f080->{';'(59) 5:4.002 ";" []})
Entering state 22
Reducing stack by rule 2 (line 44):
   $1 = nterm stmtseq ()
   $2 = nterm expr ()
   $3 = token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2f080
0x4c2f080->{';'(59) 5:4.002 ";" []})
DEBUGF(f): astree.cc[97] free_ast():
free [4C2F080]-> 5:4.2: ';': ";")
DEBUGF(a): astree.cc[32] adopt1():
0x4c2a3d0 (<<ROOT>>) adopting 0x4c2efa0 (pi)
-> $$ = nterm stmtseq ()
Stack now 0
Entering state 2
Reading a token: --accepting rule at line 34 ("
")
--accepting rule at line 32 ("# 3 "test4.in" 2")
DEBUGF(m): lyutils.cc[97] scanner_include():
filename=test4.in, scan_linenr=2
--accepting rule at line 34 ("
")
--accepting rule at line 32 ("# 1 "test4b.inh" 1")
DEBUGF(m): lyutils.cc[97] scanner_include():
filename=test4b.inh, scan_linenr=0
--accepting rule at line 34 ("
")
--accepting rule at line 34 ("
")
--accepting rule at line 37 ("a")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2f290->{7:2.0: IDENT: "a"}
Next token is token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f290
0x4c2f290->{IDENT(259) 7:2.000 "a" []})
Shifting token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f290
0x4c2f290->{IDENT(259) 7:2.000 "a" []})
Entering state 5
Reducing stack by rule 15 (line 59):
   $1 = token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f290
0x4c2f290->{IDENT(259) 7:2.000 "a" []})
-> $$ = nterm expr ()
Stack now 0 2
Entering state 11
Reading a token: --accepting rule at line 39 ("=")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2f3c0->{7:2.1: '=': "="}
Next token is token '=' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 61, yyvaluep = 0x4c2f3c0
0x4c2f3c0->{'='(61) 7:2.001 "=" []})
Shifting token '=' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 61, yyvaluep = 0x4c2f3c0
0x4c2f3c0->{'='(61) 7:2.001 "=" []})
Entering state 16
Reading a token: --accepting rule at line 37 ("pi")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2f4a0->{7:2.2: IDENT: "pi"}
Next token is token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f4a0
0x4c2f4a0->{IDENT(259) 7:2.002 "pi" []})
Shifting token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f4a0
0x4c2f4a0->{IDENT(259) 7:2.002 "pi" []})
Entering state 5
Reducing stack by rule 15 (line 59):
   $1 = token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f4a0
0x4c2f4a0->{IDENT(259) 7:2.002 "pi" []})
-> $$ = nterm expr ()
Stack now 0 2 11 16
Entering state 24
Reading a token: --accepting rule at line 42 ("*")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2f580->{7:2.4: '*': "*"}
Next token is token '*' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 42, yyvaluep = 0x4c2f580
0x4c2f580->{'*'(42) 7:2.004 "*" []})
Shifting token '*' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 42, yyvaluep = 0x4c2f580
0x4c2f580->{'*'(42) 7:2.004 "*" []})
Entering state 19
Reading a token: --accepting rule at line 37 ("r")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2f6b0->{7:2.5: IDENT: "r"}
Next token is token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f6b0
0x4c2f6b0->{IDENT(259) 7:2.005 "r" []})
Shifting token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f6b0
0x4c2f6b0->{IDENT(259) 7:2.005 "r" []})
Entering state 5
Reducing stack by rule 15 (line 59):
   $1 = token IDENT (DEBUGF(f): astree.cc[79] yyprint():
toknum = 259, yyvaluep = 0x4c2f6b0
0x4c2f6b0->{IDENT(259) 7:2.005 "r" []})
-> $$ = nterm expr ()
Stack now 0 2 11 16 24 19
Entering state 27
Reading a token: --accepting rule at line 44 ("^")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2f7e0->{7:2.6: '^': "^"}
Next token is token '^' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 94, yyvaluep = 0x4c2f7e0
0x4c2f7e0->{'^'(94) 7:2.006 "^" []})
Shifting token '^' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 94, yyvaluep = 0x4c2f7e0
0x4c2f7e0->{'^'(94) 7:2.006 "^" []})
Entering state 21
Reading a token: --accepting rule at line 36 ("2")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2f910->{7:2.7: NUMBER: "2"}
Next token is token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c2f910
0x4c2f910->{NUMBER(260) 7:2.007 "2" []})
Shifting token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c2f910
0x4c2f910->{NUMBER(260) 7:2.007 "2" []})
Entering state 6
Reducing stack by rule 16 (line 60):
   $1 = token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c2f910
0x4c2f910->{NUMBER(260) 7:2.007 "2" []})
-> $$ = nterm expr ()
Stack now 0 2 11 16 24 19 27 21
Entering state 29
Reading a token: --accepting rule at line 47 (";")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2fa40->{7:2.8: ';': ";"}
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fa40
0x4c2fa40->{';'(59) 7:2.008 ";" []})
Reducing stack by rule 11 (line 55):
   $1 = nterm expr ()
   $2 = token '^' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 94, yyvaluep = 0x4c2f7e0
0x4c2f7e0->{'^'(94) 7:2.006 "^" []})
   $3 = nterm expr ()
DEBUGF(a): astree.cc[32] adopt1():
0x4c2f7e0 (^) adopting 0x4c2f6b0 (r)
DEBUGF(a): astree.cc[32] adopt1():
0x4c2f7e0 (^) adopting 0x4c2f910 (2)
-> $$ = nterm expr ()
Stack now 0 2 11 16 24 19
Entering state 27
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fa40
0x4c2fa40->{';'(59) 7:2.008 ";" []})
Reducing stack by rule 9 (line 53):
   $1 = nterm expr ()
   $2 = token '*' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 42, yyvaluep = 0x4c2f580
0x4c2f580->{'*'(42) 7:2.004 "*" []})
   $3 = nterm expr ()
DEBUGF(a): astree.cc[32] adopt1():
0x4c2f580 (*) adopting 0x4c2f4a0 (pi)
DEBUGF(a): astree.cc[32] adopt1():
0x4c2f580 (*) adopting 0x4c2f7e0 (^)
-> $$ = nterm expr ()
Stack now 0 2 11 16
Entering state 24
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fa40
0x4c2fa40->{';'(59) 7:2.008 ";" []})
Reducing stack by rule 6 (line 50):
   $1 = nterm expr ()
   $2 = token '=' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 61, yyvaluep = 0x4c2f3c0
0x4c2f3c0->{'='(61) 7:2.001 "=" []})
   $3 = nterm expr ()
DEBUGF(a): astree.cc[32] adopt1():
0x4c2f3c0 (=) adopting 0x4c2f290 (a)
DEBUGF(a): astree.cc[32] adopt1():
0x4c2f3c0 (=) adopting 0x4c2f580 (*)
-> $$ = nterm expr ()
Stack now 0 2
Entering state 11
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fa40
0x4c2fa40->{';'(59) 7:2.008 ";" []})
Shifting token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fa40
0x4c2fa40->{';'(59) 7:2.008 ";" []})
Entering state 22
Reducing stack by rule 2 (line 44):
   $1 = nterm stmtseq ()
   $2 = nterm expr ()
   $3 = token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fa40
0x4c2fa40->{';'(59) 7:2.008 ";" []})
DEBUGF(f): astree.cc[97] free_ast():
free [4C2FA40]-> 7:2.8: ';': ";")
DEBUGF(a): astree.cc[32] adopt1():
0x4c2a3d0 (<<ROOT>>) adopting 0x4c2f3c0 (=)
-> $$ = nterm stmtseq ()
Stack now 0
Entering state 2
Reading a token: --accepting rule at line 34 ("
")
--accepting rule at line 36 ("3.141592653589793238462643383280")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2fd50->{7:3.0: NUMBER: "3.141592653589793238462643383280"}
Next token is token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c2fd50
0x4c2fd50->{NUMBER(260) 7:3.000 "3.141592653589793238462643383280" []})
Shifting token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c2fd50
0x4c2fd50->{NUMBER(260) 7:3.000 "3.141592653589793238462643383280" []})
Entering state 6
Reducing stack by rule 16 (line 60):
   $1 = token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c2fd50
0x4c2fd50->{NUMBER(260) 7:3.000 "3.141592653589793238462643383280" []})
-> $$ = nterm expr ()
Stack now 0 2
Entering state 11
Reading a token: --accepting rule at line 47 (";")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c2fe50->{7:3.32: ';': ";"}
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fe50
0x4c2fe50->{';'(59) 7:3.032 ";" []})
Shifting token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fe50
0x4c2fe50->{';'(59) 7:3.032 ";" []})
Entering state 22
Reducing stack by rule 2 (line 44):
   $1 = nterm stmtseq ()
   $2 = nterm expr ()
   $3 = token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c2fe50
0x4c2fe50->{';'(59) 7:3.032 ";" []})
DEBUGF(f): astree.cc[97] free_ast():
free [4C2FE50]-> 7:3.32: ';': ";")
DEBUGF(a): astree.cc[32] adopt1():
0x4c2a3d0 (<<ROOT>>) adopting 0x4c2fd50 (3.141592653589793238462643383280)
-> $$ = nterm stmtseq ()
Stack now 0
Entering state 2
Reading a token: --accepting rule at line 34 ("
")
--accepting rule at line 32 ("# 4 "test4.in" 2")
DEBUGF(m): lyutils.cc[97] scanner_include():
filename=test4.in, scan_linenr=3
--accepting rule at line 34 ("
")
--accepting rule at line 36 ("3")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c300c0->{8:4.0: NUMBER: "3"}
Next token is token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c300c0
0x4c300c0->{NUMBER(260) 8:4.000 "3" []})
Shifting token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c300c0
0x4c300c0->{NUMBER(260) 8:4.000 "3" []})
Entering state 6
Reducing stack by rule 16 (line 60):
   $1 = token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c300c0
0x4c300c0->{NUMBER(260) 8:4.000 "3" []})
-> $$ = nterm expr ()
Stack now 0 2
Entering state 11
Reading a token: --accepting rule at line 42 ("*")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c302f0->{8:4.1: '*': "*"}
Next token is token '*' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 42, yyvaluep = 0x4c302f0
0x4c302f0->{'*'(42) 8:4.001 "*" []})
Shifting token '*' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 42, yyvaluep = 0x4c302f0
0x4c302f0->{'*'(42) 8:4.001 "*" []})
Entering state 19
Reading a token: --accepting rule at line 36 ("4")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c303d0->{8:4.2: NUMBER: "4"}
Next token is token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c303d0
0x4c303d0->{NUMBER(260) 8:4.002 "4" []})
Shifting token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c303d0
0x4c303d0->{NUMBER(260) 8:4.002 "4" []})
Entering state 6
Reducing stack by rule 16 (line 60):
   $1 = token NUMBER (DEBUGF(f): astree.cc[79] yyprint():
toknum = 260, yyvaluep = 0x4c303d0
0x4c303d0->{NUMBER(260) 8:4.002 "4" []})
-> $$ = nterm expr ()
Stack now 0 2 11 19
Entering state 27
Reading a token: --accepting rule at line 47 (";")
DEBUGF(f): astree.cc[23] new_astree():
astree 0x4c30500->{8:4.3: ';': ";"}
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c30500
0x4c30500->{';'(59) 8:4.003 ";" []})
Reducing stack by rule 9 (line 53):
   $1 = nterm expr ()
   $2 = token '*' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 42, yyvaluep = 0x4c302f0
0x4c302f0->{'*'(42) 8:4.001 "*" []})
   $3 = nterm expr ()
DEBUGF(a): astree.cc[32] adopt1():
0x4c302f0 (*) adopting 0x4c300c0 (3)
DEBUGF(a): astree.cc[32] adopt1():
0x4c302f0 (*) adopting 0x4c303d0 (4)
-> $$ = nterm expr ()
Stack now 0 2
Entering state 11
Next token is token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c30500
0x4c30500->{';'(59) 8:4.003 ";" []})
Shifting token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c30500
0x4c30500->{';'(59) 8:4.003 ";" []})
Entering state 22
Reducing stack by rule 2 (line 44):
   $1 = nterm stmtseq ()
   $2 = nterm expr ()
   $3 = token ';' (DEBUGF(f): astree.cc[79] yyprint():
toknum = 59, yyvaluep = 0x4c30500
0x4c30500->{';'(59) 8:4.003 ";" []})
DEBUGF(f): astree.cc[97] free_ast():
free [4C30500]-> 8:4.3: ';': ";")
DEBUGF(a): astree.cc[32] adopt1():
0x4c2a3d0 (<<ROOT>>) adopting 0x4c302f0 (*)
-> $$ = nterm stmtseq ()
Stack now 0
Entering state 2
Reading a token: --accepting rule at line 34 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Now at end of input.
Reducing stack by rule 1 (line 41):
   $1 = nterm stmtseq ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Now at end of input.
Shifting token $end (DEBUGF(f): astree.cc[79] yyprint():
toknum = 0, yyvaluep = 0x4c30500
$end(0)
)
Entering state 3
Stack now 0 1 3
Cleanup: popping token $end (DEBUGF(f): astree.cc[79] yyprint():
toknum = 0, yyvaluep = 0x4c30500
$end(0)
)
Cleanup: popping nterm program ()
DEBUGF(a): main.cc[87] main():

<<ROOT>> 0x4c2a3d0->{ROOT(258) 0:0.000 "<<ROOT>>" [0x4c2efa0 0x4c2f3c0 0x4c2fd50 0x4c302f0]}
   pi 0x4c2efa0->{IDENT(259) 5:4.000 "pi" []}
   = 0x4c2f3c0->{'='(61) 7:2.001 "=" [0x4c2f290 0x4c2f580]}
      a 0x4c2f290->{IDENT(259) 7:2.000 "a" []}
      * 0x4c2f580->{'*'(42) 7:2.004 "*" [0x4c2f4a0 0x4c2f7e0]}
         pi 0x4c2f4a0->{IDENT(259) 7:2.002 "pi" []}
         ^ 0x4c2f7e0->{'^'(94) 7:2.006 "^" [0x4c2f6b0 0x4c2f910]}
            r 0x4c2f6b0->{IDENT(259) 7:2.005 "r" []}
            2 0x4c2f910->{NUMBER(260) 7:2.007 "2" []}
   3.141592653589793238462643383280 0x4c2fd50->{NUMBER(260) 7:3.000 "3.141592653589793238462643383280" []}
   * 0x4c302f0->{'*'(42) 8:4.001 "*" [0x4c300c0 0x4c303d0]}
      3 0x4c300c0->{NUMBER(260) 8:4.000 "3" []}
      4 0x4c303d0->{NUMBER(260) 8:4.002 "4" []}
DEBUGF(f): astree.cc[97] free_ast():
free [4C303D0]-> 8:4.2: NUMBER: "4")
DEBUGF(f): astree.cc[97] free_ast():
free [4C300C0]-> 8:4.0: NUMBER: "3")
DEBUGF(f): astree.cc[97] free_ast():
free [4C302F0]-> 8:4.1: '*': "*")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2FD50]-> 7:3.0: NUMBER: "3.141592653589793238462643383280")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2F910]-> 7:2.7: NUMBER: "2")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2F6B0]-> 7:2.5: IDENT: "r")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2F7E0]-> 7:2.6: '^': "^")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2F4A0]-> 7:2.2: IDENT: "pi")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2F580]-> 7:2.4: '*': "*")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2F290]-> 7:2.0: IDENT: "a")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2F3C0]-> 7:2.1: '=': "=")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2EFA0]-> 5:4.0: IDENT: "pi")
DEBUGF(f): astree.cc[97] free_ast():
free [4C2A3D0]-> 0:0.0: ROOT: "<<ROOT>>")
DEBUGF(s): main.cc[92] main():

stringset[   3]:   12638137722532372501 0x4c2f9f0->"2"
stringset[   5]:   15588046758478310861 0x4c2a4c0->"<<ROOT>>"
stringset[   6]:   12638131125462603235 0x4c304b0->"4"
stringset[   7]:   12638128926439346813 0x4c2f660->"*"
stringset[  11]:   12638145419113769978 0x4c2ef50->";"
stringset[  14]:   12638138822044000712 0x4c2ecd0->"="
stringset[  15]:   12638136623020744290 0x4c301a0->"3"
                    9410160442050401285 0x4c2ee20->"3.141592653589793238462643383280"
                     636484224684479794 0x4c2eba0->"pi"
                   12638187200555641996 0x4c2f370->"a"
stringset[  17]:   12638208091276578005 0x4c2f790->"r"
stringset[  20]:   12638201494206808739 0x4c2ea00->"t"
stringset[  22]:   12638247673695193601 0x4c2f8c0->"^"
load_factor = 0.565
bucket_count = 23
max_bucket_size = 4
==5545== 
==5545== HEAP SUMMARY:
==5545==     in use at exit: 0 bytes in 0 blocks
==5545==   total heap usage: 90 allocs, 90 frees, 20,057 bytes allocated
==5545== 
==5545== All heap blocks were freed -- no leaks are possible
==5545== 
==5545== For counts of detected and suppressed errors, rerun with: -v
==5545== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
EXIT STATUS 1
