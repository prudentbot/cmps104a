head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2013.10.11.01.48.18;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.10.11.01.44.15;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.10.11.01.17.45;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.09.21.00.52.13;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.09.19.23.38.25;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@%{
// $Id: parser.y,v 1.4 2013-10-10 18:44:15-07 - - $

#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "lyutils.h"
#include "astree.h"

#define YYDEBUG 1
#define YYERROR_VERBOSE 1
#define YYPRINT yyprint
#define YYMALLOC yycalloc

static void* yycalloc (size_t size);

%}

%debug
%defines
%error-verbose
%token-table
%verbose

%destructor { error_destructor ($$); } <>

%token  ROOT IDENT NUMBER

%right  '='
%left   '+' '-'
%left   '*' '/'
%right  '^'
%right  POS "u+" NEG "u-"

%start  program


%%

program : stmtseq               { $$ = $1; }
        ;

stmtseq : stmtseq expr ';'      { free_ast ($3); $$ = adopt1 ($1, $2); }
        | stmtseq error ';'     { free_ast ($3); $$ = $1; }
        | stmtseq ';'           { free_ast ($2); $$ = $1; }
        |                       { $$ = new_parseroot(); }
        ;

expr    : expr '=' expr         { $$ = adopt2 ($2, $1, $3); }
        | expr '+' expr         { $$ = adopt2 ($2, $1, $3); }
        | expr '-' expr         { $$ = adopt2 ($2, $1, $3); }
        | expr '*' expr         { $$ = adopt2 ($2, $1, $3); }
        | expr '/' expr         { $$ = adopt2 ($2, $1, $3); }
        | expr '^' expr         { $$ = adopt2 ($2, $1, $3); }
        | '+' expr %prec POS    { $$ = adopt1sym ($1, $2, POS); }
        | '-' expr %prec NEG    { $$ = adopt1sym ($1, $2, NEG); }
        | '(' expr ')'          { free_ast2 ($1, $3); $$ = $2; }
        | IDENT                 { $$ = $1; }
        | NUMBER                { $$ = $1; }
        ;

%%

const char* get_yytname (int symbol) {
   return yytname [YYTRANSLATE (symbol)];
}

bool is_defined_token (int symbol) {
   return YYTRANSLATE (symbol) > YYUNDEFTOK;
}

static void* yycalloc (size_t size) {
   void* result = calloc (1, size);
   assert (result != NULL);
   return result;
}

RCSC("$Id: parser.y,v 1.4 2013-10-10 18:44:15-07 - - $")

@


1.4
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.3 2013-10-10 18:17:45-07 - - $
d38 1
a62 1

d79 1
a79 1
RCSC("$Id: parser.y,v 1.3 2013-10-10 18:17:45-07 - - $")
@


1.3
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.2 2013-09-20 17:52:13-07 - - $
d70 1
a70 1
   return symbol > YYUNDEFTOK;
d79 1
a79 1
RCSC("$Id: parser.y,v 1.2 2013-09-20 17:52:13-07 - - $")
@


1.2
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.1 2013-09-19 16:38:25-07 - - $
d26 2
d79 1
a79 1
RCSC("$Id: parser.y,v 1.1 2013-09-19 16:38:25-07 - - $")
@


1.1
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.9 2013-08-22 13:58:43-07 - - $
d67 4
d77 1
a77 1
RCSC("$Id: parser.y,v 1.9 2013-08-22 13:58:43-07 - - $")
@
